{"/home/travis/build/npmtest/node-npmtest-geddy/test.js":"/* istanbul instrument in package npmtest_geddy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-geddy/lib.npmtest_geddy.js":"/* istanbul instrument in package npmtest_geddy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_geddy = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_geddy = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-geddy/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-geddy && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_geddy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_geddy\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_geddy.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_geddy.rollup.js'] =\n            local.assetsDict['/assets.npmtest_geddy.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_geddy.__dirname +\n                    '/lib.npmtest_geddy.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-geddy/node_modules/geddy/lib/geddy.js":"\nvar geddy = global.geddy || {}\n  , EventEmitter = require('events').EventEmitter\n  , utils = require('utilities')\n  , pkg = require('../package');\n\n// Set the One True Geddy Global\nglobal.geddy = geddy;\n\nutils.enhance(geddy, new EventEmitter());\n\nutils.mixin(geddy, {version: pkg.version});\nutils.mixin(geddy, utils);\nutils.mixin(geddy, new (function () {\n  var _started = false\n    , _master\n    , _worker\n\n  this.start = function (options) {\n    var opts = options || {}\n      , App\n      , app\n      , worker\n      , config = require('./config')\n      , c = config.readConfig(opts);\n\n    geddy.config = c;\n\n    App = require('./app').App;\n\n    worker = require('../lib/cluster/worker');\n    _worker = new worker.Worker();\n    geddy.worker = _worker;\n\n    _worker.init({clustered: false, logger: c.logger || utils.log}, function () {\n      utils.mixin(geddy, _worker);\n\n      app = new App();\n      app.init(_worker.config, function () {\n        geddy.emit('initialized');\n        utils.mixin(geddy, app);\n        _worker.startServer(function () {\n          geddy.emit('started');\n        });\n      });\n    });\n    _worker.configure(c);\n  };\n\n  this.startCluster = function (options) {\n    var opts = options || {}\n      , cluster = require('cluster')\n      , master\n      , worker\n      , App\n      , app;\n\n    // No repeatsies\n    if (_started) {\n      return;\n    }\n\n    geddy.isMaster = cluster.isMaster;\n    geddy.isWorker = cluster.isWorker;\n\n    // Master-process, start workers\n    if (geddy.isMaster) {\n      master = require('../lib/cluster/master');\n      _master = new master.Master();\n      _master.on('started', function () {\n        geddy.emit('clusterStarted');\n      });\n      _master.start(opts);\n    }\n    // Worker-process, start up an app\n    else {\n      App = require('./app').App;\n\n      worker = require('../lib/cluster/worker');\n      _worker = new worker.Worker();\n      geddy.worker = _worker;\n\n      _worker.init({clustered: true}, function () {\n        utils.mixin(geddy, _worker);\n\n        app = new App();\n        app.init(_worker.config, function () {\n          geddy.emit('initialized');\n          utils.mixin(geddy, app);\n          _worker.startServer(function () {\n            geddy.emit('started');\n          });\n        });\n      });\n    }\n  };\n\n  this.stop = function () {\n    if (geddy.isMaster || geddy.isWorker) {\n      throw new Error('`stop` should only be called in an unclustered server.');\n    }\n    _worker.shutdown();\n  };\n\n  this.stopCluster = function () {\n    if (!geddy.isMaster) {\n      throw new Error('`stopCluster` should only be called in the master process of a cluster.');\n    }\n    _master.startShutdown();\n  };\n\n})());\n\n// Also allow export/local\nmodule.exports = geddy;\n\n","/home/travis/build/npmtest/node-npmtest-geddy/node_modules/geddy/lib/base_config.js":" var path = require('path')\n  , config\n  , cwd = process.cwd();\n\nconfig = {\n// Default to prod\n  environment: 'development'\n// Number of worker-processes to spawn\n, workers: 2\n// Port to listen on\n, port: 4000\n// Default to no SSL and SPDY setup\n, spdy: null\n, ssl: null\n// Include stack traces in error pages\n, detailedErrors: true\n// Milliseconds before a request times out\n// Value must be truthy + greater than zero\n// to have effect -- default to no timeout\n, requestTimeout: null\n// Maps flash message keys to css classes\n, flash: {\n    defaultClass: 'alert'\n  , inlineClasses: {\n      success: 'alert alert-success',\n      alert: 'alert',\n      error: 'alert alert-error',\n      info: 'alert alert-info'\n    }\n  , blockClasses: {\n      success: 'alert alert-block alert-success',\n      alert: 'alert alert-block',\n      error: 'alert alert-block alert-error',\n      info: 'alert alert-block alert-info'\n    }\n  }\n// Set stdout to debug log-level\n, debug: false\n// List of files to watch in order to restart geddy on changes in\n// development environment. Set these in config/development.js\n, watch: {\n    files: []\n  , includePattern: ''\n  , excludePattern: ''\n}\n// Use worker-process rotation\n, rotateWorkers: true\n// How long for a full rotation\n, rotationWindow: 2 * 60 * 60 * 1000\n// How long to wait for in-flight requests before rotating\n, rotationTimeout: 5 * 60 * 1000\n// Default logfile location\n, logDir: path.normalize(cwd + '/log')\n// How long to wait for in-flight requests before killing\n, gracefulShutdownTimeout: 30000\n// Number of milliseconds between heartbeat calls from\n// the worker to the master\n, heartbeatInterval: 5000\n// Number of milliseconds old a heartbeat-timestamp can be\n// before assuming a worker is hung, and needs to be killed\n, heartbeatWindow: 20000\n// Place to look for static content to serve in dev-mode\n, staticFilePath: path.normalize(cwd + '/public')\n// Name of host to use for serving static assets -- default to\n// empty string, to allow stuff to be served from '/js', '/css', etc.\n, assetHost: ''\n// Prefix for js/css/img directories for serving static assets\n// Relative paths in helpers (scriptLink, styleLink, imageTag)\n// will use this prefix + plus asset type\n, assetBasePath: '/'\n// static file cache control\n, cacheControl: {\n  // should contain mime-types as keys and expiration time in seconds\n  // as values, if mime type was not found the default will be used\n  expires: {\n    default: 0\n  }\n}\n// Default session-settings -- setting to null will mean no sessions\n, sessions: {\n    store: 'cookie',\n    key: 'sid',\n    expiry: 14 * 24 * 60 * 60\n  }\n// Key for when using Cookie session-store\n, cookieSessionKey: 'sdata'\n// Where to look for locale text-files by default\n, i18n: {\n    defaultLocale: 'en-us'\n  , loadPaths: [path.normalize(cwd + '/config/locales')]\n  }\n// Used anywhere you need to refer to the app\n , appName: 'Geddy App'\n// Default to null, accept connections directed to any IPv4 address\n, hostname: null\n// Used in helpers\n, fullHostname: null\n// Switch for making before/after filters compatible with\n// Connect middleware\n, connectCompatibility: false\n// No mailer support by default\n, mailer: null\n};\n\nmodule.exports = config;\n","/home/travis/build/npmtest/node-npmtest-geddy/node_modules/geddy/lib/cmd.js":"var path = require('path')\n  , utils = require('utilities')\n  , parseopts = require('./parseopts')\n  , cmd = {}\n  , engineCmd\n  , rtCmd\n  , modelCmd\n  , die\n  , jakeArgs\n  , jakeProgram\n  , jakeLoader\n\nvar _taskArgsMap = {\n  'app': ['primary', 'template', 'rt']\n, 'model': ['primary', 'model']\n, 'resource': ['primary', 'model']\n, 'scaffold': ['primary', 'model', 'template', 'rt']\n, 'controller': ['primary', 'template']\n, 'secret': []\n, 'auth': ['template']\n, 'auth:update': []\n, 'migration': ['primary']\n, 'upgrade': ['template','rt']\n, 'upgradePrevious': []\n};\n\ncmd = new (function () {\n    var genCmds\n      , jakeCmds;\n\n    genCmds = {\n      'app': true\n    , 'auth': true\n    , 'auth:update': true\n    , 'secret': true\n    , 'resource': true\n    , 'scaffold': true\n    , 'controller': true\n    , 'model': true\n    , 'migration': true\n    , 'upgrade': true\n    , 'upgradePrevious': true\n    };\n\n    jakeCmds = {\n      'console': true\n    , 'routes': true\n    , 'db:init': true\n    };\n\n  this.parseArgs = function (args) {\n    var initArg = args[0]\n      , ret;\n    // No args, or first arg is an option -- assume no commands,\n    // running server. Bail out with current args\n    if (!args.length || initArg.indexOf('-') === 0) {\n      return args;\n    }\n    else {\n      ret = args.slice();\n    }\n\n    // Gen commands\n    if (genCmds[initArg]) {\n      console.log('=======================');\n      console.log(' NOTE: `' + ret[0] + '` command is ' +\n          'deprecated.\\n Please use `geddy gen ' + ret[0] + '`');\n      console.log('=======================');\n      ret.unshift('gen');\n    }\n    // Jake commands\n    else if (jakeCmds[initArg]) {\n      if (ret[0] !=  'console') { // Grandfather the `console` cmd\n        console.log('=======================');\n        console.log(' NOTE: `' + ret[0] + '` command is ' +\n            'deprecated.\\n Please use `geddy jake ' + ret[0] + '`');\n        console.log('=======================');\n      }\n      ret.unshift('jake');\n    }\n    else {\n      if (initArg == 'gen') {\n        if (!genCmds[ret[1]]) {\n          throw new Error(initArg + ' ' + ret[1] +\n              ' is not a valid geddy command.');\n        }\n      }\n      else {\n        if (initArg != 'jake') {\n          throw new Error(initArg + ' is not a valid geddy command.');\n        }\n      }\n    }\n    return ret;\n  };\n\n})();\n\n\nvar Cmd = function (args) {\n  this.cmds = null;\n  this.opts = null;\n  this.namedArgs = {\n    primary: ''\n  , model: ''\n  , template: ''\n  , rt: ''\n  };\n  this.baseTaskName = args[0];\n  this.jakeTaskName = '';\n  this.jakeProgram = null;\n  this.jakeLoader = null;\n\n  this.createJake();\n  this.parseArgs(args);\n  this.createJakeTaskName();\n};\n\nCmd.prototype = new (function () {\n\n  // Options available -- probably should have gone with\n  // '--template=jade' instead of a flag for each template type\n  var _optsMap = [\n    { full: ['trace', 'debug']\n    , abbr: ['t', 'd']\n    , args: false\n    , canon: 'trace'\n    }\n  , { full: 'jade'\n    , abbr: 'j'\n    , args: false\n    , canon: 'jade'\n    }\n  , { full: ['handle', 'handlebars']\n    , abbr: 'H'\n    , args: false\n    , canon: 'handlebars'\n    }\n  , { full: 'mustache'\n    , abbr: 'm'\n    , args: false\n    , canon: 'mustache'\n    }\n  , { full: 'swig'\n    , abbr: 's'\n    , args: false\n    , canon: 'swig'\n    }\n  , { full: 'realtime'\n    , abbr: 'rt'\n    , args: false\n    , canon: 'realtime'\n    }\n  ];\n\n  this.run = function () {\n    this.initJake();\n    this.runJake();\n  };\n\n  this.parseArgs = function (args) {\n    var parser\n      , cmds\n      , opts\n      , namedArgs = this.namedArgs\n      , model = ''\n      , template = 'default'\n      , rt = 'default';\n\n    parser = new parseopts.Parser(_optsMap);\n    parser.parse(args);\n    cmds = parser.cmds;\n    opts = parser.opts;\n    // Set handlebars option to handle option\n    if (opts.handlebars) {\n      opts.handle = opts.handlebars;\n    }\n\n    this.cmds = cmds;\n    this.opts = opts;\n\n    // Parse the primary arg out of the args\n    // This is the main arg passed to each Jake task\n    // e.g., the app name, model name, etc.\n    // ------\n    namedArgs.primary = cmds[1];\n\n    // Get the model properties\n    // ------\n    if (cmds.slice(2).length) {\n      // Use percents to delimit, since this gets passed to Jake\n      model = cmds.slice(2).join('%');\n    }\n    namedArgs.model = model;\n\n    // Template-language options\n    // ------\n    if (opts.jade) {\n      template = 'jade';\n    }\n    else if (opts.handle) {\n      template = 'handlebars';\n    }\n    else if (opts.mustache) {\n      template = 'mustache';\n    }\n    else if (opts.swig) {\n      template = 'swig';\n    }\n    namedArgs.template = template;\n\n    // Set up RT?\n    // ------\n    if (opts.realtime) {\n      rt = 'realtime';\n    }\n    namedArgs.rt = rt;\n  };\n\n  this.createJakeTaskName = function () {\n    var name = this.baseTaskName\n      , namedArgs = this.namedArgs\n      , argNames = _taskArgsMap[name]\n      , args = [];\n    name = 'gen:' + name;\n    // Get any value parsed out for each of the specified named args\n    // for this particular task\n    argNames.forEach(function (n) {\n      args.push(namedArgs[n]);\n    });\n    name += '[' + args.join(',') + ']';\n    this.jakeTaskName = name;\n  };\n\n  this.createJake = function () {\n    var jake = require('jake')\n      , dirpath = path.normalize(path.join(__dirname, '..', 'gen'))\n      , filepath = path.normalize(path.join(dirpath, 'Jakefile'));\n    this.jakeProgram = jake.program;\n    this.jakeLoader = jake.loader;\n    // Load Geddy's bundled Jakefile\n    this.jakeLoader.loadDirectory(path.join(dirpath, 'jakelib'));\n    this.jakeLoader.loadFile(filepath);\n  };\n\n  this.initJake = function () {\n    this.jakeProgram.init({options: {\n      trace: this.opts.trace\n    }});\n    this.jakeProgram.setTaskNames([this.jakeTaskName]);\n  };\n\n  this.runJake = function () {\n    this.jakeProgram.run();\n  };\n})();\n\nvar JakeCmd = function (cmd, opts) {\n  Cmd.apply(this, arguments);\n};\n\nJakeCmd.prototype = Object.create(Cmd.prototype);\nJakeCmd.prototype.constructor = JakeCmd;\n\n// Override a couple of methods\nutils.mixin(JakeCmd.prototype, new (function () {\n  this.parseArgs = function (args) {\n    // Let Jake parse the raw args directly\n    this.jakeProgram.parseArgs(args);\n  };\n\n  this.initJake = function () {\n    // Load Jakefile and jakelibdir files for app\n    this.jakeLoader.loadFile(this.jakeProgram.opts.jakefile);\n    this.jakeLoader.loadDirectory(this.jakeProgram.opts.jakelibdir);\n    // Prepend env:init to load Geddy env unless running db:init\n    // db:init has to load the config first, then install the\n    // DB lib, then load the rest of the app\n    if (this.jakeProgram.taskNames[0] != 'db:init') {\n      this.jakeProgram.taskNames.unshift('env:init');\n    }\n    this.jakeProgram.init();\n  };\n\n  // Override, no-op -- don't need a task-name with\n  // bracket params -- setting directly\n  this.createJakeTaskName = function () {};\n\n})());\n\ncmd.Cmd = Cmd;\ncmd.JakeCmd = JakeCmd;\n\nmodule.exports = cmd;\n","/home/travis/build/npmtest/node-npmtest-geddy/node_modules/geddy/lib/parseopts.js":"/*\n * Geddy JavaScript Web development framework\n * Copyright 2112 Matthew Eernisse (mde@fleegix.org)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n*/\nvar parseopts = {};\n\n/**\n * @constructor\n * Parses a list of command-line args into a key/value object of\n * options and an array of positional commands.\n *\n * @param {Array} opts A list of options\n *\n * Examples:\n *  [\n *    { full: 'foo'\n *    , abbr: 'f'\n *    , args: true\n *    , canon: 'foo'\n *    }\n *  , { full: 'bar'\n *    , abbr: ['b', 'x']\n *    , args: false\n *    , canon: 'bar'\n *  }\n * ]\n */\nparseopts.Parser = function (opts) {\n  var self = this\n    , key\n    , value;\n\n  this.cmds = []; // Positional commands parsed from args\n  this.opts = {}; // A key/value object of matching options parsed from args\n\n  // Data structures used for parsing\n  this.reg = [];\n  this.canonicalOpts = {};\n  this.shortOpts = {};\n  this.longOpts = {};\n\n  opts.forEach(function (value) {\n    // Create the canonical\n    self.canonicalOpts[value.canon] = {\n      canon: value.canon\n    , args: value.args\n    };\n    // Create short and long aliases that all point to the same canonical\n    ['full', 'abbr'].forEach(function (k) {\n      var v = value[k]\n        , keyType = k == 'full' ?\n              'longOpts' : 'shortOpts';\n      v = Array.isArray(v) ? v : [v]; // Handle single vals or arrays of them\n      v.forEach(function (o) {\n        self[keyType][o] = self.canonicalOpts[value.canon];\n      });\n    });\n  });\n\n  this.reg = opts;\n};\n\nparseopts.Parser.prototype = new function () {\n\n  /**\n   * Parses an array of arguments into options and positional commands\n   * Any matcthing opts end up in a key/value object keyed by the 'canon'\n   * name of the option. Any args that aren't passed as options end up in\n   * an array of positional commands.\n   * Any options passed without a value end up with a value of null\n   * in the key/value object of options\n   * If the user passes options that are not defined in the list passed\n   * to the constructor, they will be silently ignored\n   * @param {Array} args The command-line args to parse\n   */\n  this.parse = function (args) {\n    var cmds = []\n      , opts = {}\n      , arg\n      , argObj\n      , canonArgName\n      , argItems;\n\n    while (args.length) {\n      arg = args.shift();\n\n      // Full option name\n      if (arg.indexOf('--') === 0) {\n        argItems = arg.split('=');\n        argObj = this.longOpts[argItems[0].substr(2)];\n\n        if (argObj) {\n          // Args included a space instead of usual = value\n          if (argItems.length === 1) {\n            canonArgName = argObj.canon;\n\n            if (!argObj.args) {\n              opts[canonArgName] = true;\n            } else {\n              // If no argument is given for this option then set it's value to true\n              if(!args[0] || (args[0].indexOf('-') == 0) || (args[0].indexOf('--') == 0)) {\n                opts[canonArgName] = true;\n              } else {\n                opts[canonArgName] = args.shift();\n              }\n            }\n          }\n          else {\n            canonArgName = argObj.canon;\n\n            // If the opt doesn't take args then set value to true\n            if (!argObj.args) {\n              opts[canonArgName] = true;\n            } else {\n              opts[canonArgName] = argItems[1] || true;\n            }\n          }\n        }\n        else {\n          // Silently ignore unknown options\n        }\n      }\n      // Short option name\n      else if (arg.indexOf('-') === 0) {\n        // Get arg from list of options\n        argObj = this.shortOpts[arg.substr(1)];\n\n        // If argument exists\n        if (argObj) {\n          canonArgName = argObj.canon; // Get canon name\n\n          // If the option doesn't rake arguments then set value to true\n          if(!argObj.args) {\n            opts[canonArgName] = true;\n          } else {\n            // If no argument is given for this option then set it's value to true\n            if(!args[0] || (args[0].indexOf('-') == 0) || (args[0].indexOf('--') == 0)) {\n              opts[canonArgName] = true;\n            } else {\n              opts[canonArgName] = args.shift();\n            }\n          }\n        } else throw new Error('Unknown option \"' + arg + '\"');\n      }\n      // Assume command name\n      else cmds.push(arg);\n    }\n\n    this.cmds = cmds;\n    this.opts = opts;\n  };\n\n};\n\nmodule.exports = parseopts;\n","/home/travis/build/npmtest/node-npmtest-geddy/node_modules/geddy/lib/config.js":"var config\n  , path = require('path')\n  , fs = require('fs')\n  , utils = require('utilities')\n  , ejs = require('./template/engines/ejs');\n\nconfig = new (function () {\n\n  this.readConfig = function (options) {\n    var opts = options || {}\n      , ret = {}\n      , baseConfig\n      , env\n      , dir = process.cwd()\n      , dirList = fs.readdirSync(path.join(dir, 'config'))\n      , fileName\n      , fileExt\n      , fileBaseName\n      , useCoffee\n      , appBaseConfig\n      , appEnvConfig\n      , secretsFile = path.join(dir, 'config', 'secrets.json')\n      , secrets\n      , protocol\n      , fullHostname;\n\n    baseConfig = utils.mixin({}, require('./base_config'), true);\n\n    // Fallbacks for determining the environment\n    env = opts.environment || process.env.NODE_ENV || baseConfig.environment;\n\n    // Base config for workers-count should be 1 in dev-mode\n    // Cycle based on filesystem changes, not keep-alive\n    // Process-rotation not possible in this mode\n    if (env == 'development') {\n      baseConfig.workers = 1;\n      baseConfig.rotateWorkers = false;\n    }\n\n    // App configs\n    for (var i = 0; i < dirList.length; i++) {\n      fileName = dirList[i];\n      fileExt = path.extname(fileName);\n      fileBaseName = path.basename(fileName, fileExt);\n      // Require the environment configuration and the base configuration file\n      if (fileBaseName === env || fileBaseName === 'environment') {\n        if (fileExt === '.coffee') {\n          // fileName is a CoffeeScript file so try to require it\n          useCoffee = useCoffee || utils.file.requireLocal('coffee-script');\n        }\n        appBaseConfig = require(dir + '/config/environment');\n        appEnvConfig = require(dir + '/config/' + env);\n      }\n    }\n\n    // Start with a blank slate, mix everything in\n    utils.mixin(ret, baseConfig, true);\n    utils.mixin(ret, appBaseConfig, true);\n    utils.mixin(ret, appEnvConfig, true);\n    utils.mixin(ret, opts, true);\n\n    // Mix in any app-secrets\n    if (utils.file.existsSync(secretsFile)) {\n      secrets = fs.readFileSync(secretsFile).toString();\n      // HACK, allow EJS in JSON, get env vars for deploy-from-Git\n      secrets = ejs.render(secrets, {});\n      try {\n        // Parse into obj and mix in to config\n        secrets = JSON.parse(secrets);\n      }\n      catch (e) {\n        throw new Error('Could not parse secrets.json file, ' + e.message);\n      }\n      utils.mixin(ret, secrets);\n    }\n\n    // Obvious, don't rotate with only one worker\n    if (ret.workers < 2) {\n      ret.rotateWorkers = false;\n    }\n\n    // Construct fullHostname if not specifically set and there's a\n    // usable hostname (i.e., not the 'any IPv4 address' option)\n    if (!ret.fullHostname && ret.hostname) {\n      protocol = (ret.spdy || ret.ssl) ? 'https' : 'http';\n      fullHostname = protocol + '://' + ret.hostname;\n      if (ret.port != 80) {\n        fullHostname += ':' + ret.port;\n      }\n      ret.fullHostname = fullHostname;\n    }\n\n    return ret;\n  };\n\n})();\n\nmodule.exports = config;\n","/home/travis/build/npmtest/node-npmtest-geddy/node_modules/geddy/lib/template/engines/ejs.js":"/*\n * Geddy JavaScript Web development framework\n * Copyright 2112 Matthew Eernisse (mde@fleegix.org)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n*/\n\nvar utils = require('utilities')\n  , ejs;\n\nejs = new (function () {\n  this.compile = function (template) {\n    var templ = new Template(template);\n    return templ.compile();\n  };\n\n  this.render = function (template, data) {\n    return (this.compile(template))(data);\n  };\n\n})();\n\nvar Template = function (text) {\n  this.templateText = text;\n  this.mode = null;\n  this.truncate = false;\n  this.currentLine = 1;\n  this.source = '';\n};\n\nTemplate.prototype = new function () {\n  var _REGEX = /(<%%)|(%%>)|(<%=)|(<%-)|(<%#)|(<%)|(%>)|(-%>)/\n    , _GLOBAL = (function () { return this; })();\n\n  this.modes = {\n      EVAL: 'eval'\n    , ESCAPED: 'escaped'\n    , RAW: 'raw'\n    , APPEND: 'append'\n    , COMMENT: 'comment'\n    , LITERAL: 'literal'\n  };\n\n  this.handleErr = function (e, line) {\n    var src = this.templateText.split('\\n')\n      , ctxt = ''\n      , err = new Error()\n      , start = Math.max(line - 3, 0)\n      , end = Math.min(src.length, line + 3)\n      , arr = src.slice(start, end)\n      , curr;\n\n    for (var i = 0, len = arr.length; i < len; i++) {\n      curr = i + start + 1;\n      ctxt += (curr == line ? ' >> ' : '    ')\n        + curr\n        + '| '\n        + arr[i] + '\\n';\n    }\n\n    err.name = e.name;\n    err.message = 'ejs:' + line + '\\n' + ctxt + e.message;\n    throw err;\n  };\n\n  this.compile = function () {\n    var self = this\n      , src\n      , fn\n      , rethrow;\n\n    if (!this.source) {\n      this.generateSource();\n    }\n\n    src = 'var __output = \"\", __line = 1; with (locals) { try {' +\n        this.source + '} catch (e) { rethrow(e, __line); } } return __output;';\n\n    fn = new Function('locals', src);\n\n    rethrow = function (e, line) { self.handleErr(e, line); };\n\n    // Return a callable function which will execute the function\n    // created by the source-code, with the passed data as locals\n    return function (data, context) {\n      // Prevent mixin pollution\n      var d = utils.mixin({}, data);\n      var locals = utils.mixin(d, {\n        utils: utils\n      , rethrow: rethrow\n      });\n      return fn.call(context || _GLOBAL, locals);\n    };\n\n  };\n\n  this.process = function (params) {\n    var self = this\n      , params = params || {}\n      , domNode = params.node\n      , src\n      , fn\n      , rethrow;\n\n    this.data = params;\n    this.source = this.source || ''; // Cache the template source for speed\n\n    if(!this.source) this.generateSource();\n\n    src = 'var __output = \"\", __line = 1; with (locals) { try {' +\n        this.source + '} catch (e) { rethrow(e, __line); } } return __output;';\n    fn = new Function('locals', src);\n    rethrow = function (e, line) { self.handleErr(e, line); };\n\n    this.markup = fn.call(this, utils.mixin({\n        utils: utils\n      , rethrow: rethrow\n    }, this.data));\n\n    if (domNode) {\n      domNode.innerHTML = this.markup;\n    }\n    return this.markup;\n  };\n\n  this.generateSource = function () {\n    var matches = this.parseTemplateText()\n      , line\n      , i;\n\n    if (matches) {\n      i = -1\n      while (++i < matches.length) {\n        line = matches[i];\n\n        if (line) {\n          this.scanLine(line);\n        }\n      }\n    }\n  };\n\n  this.parseTemplateText = function () {\n    var str = this.templateText\n      , pat = _REGEX\n      , result = pat.exec(str)\n      , arr = []\n      , firstPos\n      , lastPos;\n\n    while (result) {\n      firstPos = result.index;\n      lastPos = pat.lastIndex;\n\n      if (firstPos !== 0) {\n        arr.push(str.substring(0, firstPos));\n        str = str.slice(firstPos);\n      }\n\n      arr.push(result[0]);\n      str = str.slice(result[0].length);\n      result = pat.exec(str);\n    }\n\n    if (str !== '') {\n      arr.push(str);\n    }\n\n    return arr;\n  };\n\n  this.scanLine = function (line) {\n    var self = this\n      , newLineCount = 0\n      , _addOutput;\n\n    _addOutput = function () {\n      if (self.truncate) {\n        line = line.replace('\\n', '');\n      }\n\n      // Preserve literal slashes\n      line = line.replace(/\\\\/g, '\\\\\\\\');\n\n      // Convert linebreaks\n      line = line.replace(/\\n/g, '\\\\n');\n      line = line.replace(/\\r/g, '\\\\r');\n\n      // Escape double-quotes\n      // - this will be the delimiter during execution\n      line = line.replace(/\"/g, '\\\\\"');\n      self.source += '__output += \"' + line + '\";';\n    };\n\n    newLineCount = (line.split('\\n').length - 1);\n\n    switch (line) {\n      case '<%':\n        this.mode = this.modes.EVAL;\n        break;\n      case '<%=':\n        this.mode = this.modes.ESCAPED;\n        break;\n      case '<%-':\n        this.mode = this.modes.RAW;\n        break;\n      case '<%#':\n        this.mode = this.modes.COMMENT;\n        break;\n      case '<%%':\n        this.mode = this.modes.LITERAL;\n        this.source += '__output += \"' + line.replace('<%%', '<%') + '\";';\n        break;\n      case '%>':\n      case '-%>':\n        if (this.mode == this.modes.LITERAL) {\n          _addOutput();\n        }\n\n        this.mode = null;\n        this.truncate = line.indexOf('-') == 0;\n        break;\n      default:\n        // In script mode, depends on type of tag\n        if (this.mode) {\n          switch (this.mode) {\n            // Just executing code\n            case this.modes.EVAL:\n              this.source += line;\n              break;\n            // Exec, esc, and output\n            case this.modes.ESCAPED:\n              // Add the exec'd, escaped result to the output\n              this.source += '__output += utils.string.escapeXML(' +\n                  line.replace(/;\\S*/, '') + ');';\n              break;\n            // Exec and output\n            case this.modes.RAW:\n              // Add the exec'd result to the output\n              this.source += '__output += ' + line + ';';\n              break;\n            case this.modes.COMMENT:\n              // Do nothing\n              break;\n            // Literal <%% mode, append as raw output\n            case this.modes.LITERAL:\n              _addOutput();\n              break;\n          }\n        }\n        // In string mode, just add the output\n        else _addOutput();\n    }\n\n    if (newLineCount) {\n      this.currentLine += newLineCount;\n      this.source += '__line = ' + this.currentLine + ';';\n    }\n  };\n};\n\nmodule.exports = ejs;\n","/home/travis/build/npmtest/node-npmtest-geddy/node_modules/geddy/lib/cookies.js":"/*\n * Geddy JavaScript Web development framework\n * Copyright 2112 Matthew Eernisse (mde@fleegix.org)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n*/\n\nvar cookies = {};\n\ncookies.CookieCollection = function (req) {\n  this.collection = {};\n  if (req.headers['cookie']) {\n    this.parse(req.headers['cookie'] || {});\n  }\n};\n\ncookies.CookieCollection.prototype = new function () {\n  this.parse = function (header) {\n    var c = header.split(';');\n    var item;\n    var parsed, name, value;\n    for (var i = 0; i < c.length; i++) {\n      item = geddy.string.trim(c[i]);\n      parsed = item.split('=');\n      name = parsed[0];\n      value = parsed[1];\n      this.collection[name] = new cookies.Cookie(name, value);\n    }\n  };\n\n  this.toArray = function () {\n    var send = [];\n    var c;\n    for (var p in this.collection) {\n      c = this.collection[p];\n      if (c.send) {\n        send.push(c.toString());\n      }\n    }\n    return send;\n  };\n\n  this.get = function (name) {\n    var c = this.collection[name] || {};\n    return c.value;\n  };\n\n  this.set = function (name, value, opts) {\n    var c = new cookies.Cookie(name, value, opts);\n    c.send = true;\n    this.collection[name] = c;\n  };\n\n}();\n\ncookies.Cookie = function (name, value, o) {\n  var opts = o || {};\n  this.name = name;\n  this.value = value;\n  this.path = opts.path || '/';\n  this.expires = opts.expires || null;\n  this.domain = opts.domain || null;\n  this.httpOnly = opts.httpOnly || false;\n  this.send = false;\n};\n\ncookies.Cookie.prototype.toString = function () {\n  var res = [this.name + '=' + this.value];\n  var keys = ['path', 'expires', 'domain'];\n  var key;\n  var str;\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    if (this[key]) {\n      res.push(key + '=' + this[key]);\n    }\n  }\n  if (this.httpOnly) {\n    res.push('HttpOnly');\n  }\n  str = res.join('; ');\n  return str;\n};\n\nmodule.exports = cookies;\n\n","/home/travis/build/npmtest/node-npmtest-geddy/node_modules/geddy/lib/in_flight.js":"var utils = require('utilities')\n  , EventEmitter = require('events').EventEmitter\n  , InFlight\n  , InFlightEntry;\n\nvar _timeout = null;\n\nInFlightEntry = function (props) {\n  this.id = utils.string.uuid();\n  utils.mixin(this, props);\n  EventEmitter.call(this);\n};\nInFlightEntry.prototype = Object.create(EventEmitter.prototype);\n\nInFlight = function () {\n  this.entries = new utils.SortedCollection();\n  this.timeoutId = null;\n};\n\nInFlight.prototype = new (function () {\n\n  this.addEntry = function (data) {\n    var entry = new InFlightEntry(data);\n    this.entries.addItem(entry.id, entry);\n\n    if (_timeout) {\n      entry.timeoutId = setTimeout(function () {\n        entry.emit('timeout', _timeout);\n        // If there's no controller to respond, at least\n        // output something useful\n        if (!entry.controller) {\n          entry.response.send('Request timed out', 504);\n        }\n      }, _timeout);\n    }\n\n    return entry;\n  };\n\n  this.setEntry = function (id, obj) {\n    this.entries.setItem(id, obj);\n  };\n\n  this.removeEntry = function (id) {\n    var entry = this.getEntry(id);\n    clearTimeout(entry.timeoutId);\n    this.entries.removeItem(id);\n  };\n\n  this.getEntry = function (id) {\n    return this.entries.getItem(id);\n  };\n\n  this.getCount = function () {\n    return this.entries.count;\n  };\n\n  this.each = function (handler) {\n    this.entries.each(handler);\n  };\n\n  this.setTimeout = function (t) {\n    _timeout = t;\n  };\n\n})();\n\nmodule.exports = new InFlight();\n\n","/home/travis/build/npmtest/node-npmtest-geddy/node_modules/geddy/lib/request.js":"var EventBuffer = require('utilities').EventBuffer\n  , EventEmitter = require('events').EventEmitter\n  , ServerRequest = require('http').IncomingMessage\n  , utils = require('utilities')\n  , parseQuery\n  , Request;\n\nRequest = function (req) {\n  // Copy has-own props over from original\n  utils.mixin(this, req);\n  // Save original req obj\n  this.req = req;\n  // Set up buffering\n  this.buffer = new EventBuffer(req);\n\n  // Methods for so-called Connect-style middleware\n  this.query = Request.parseQuery(req.url);\n};\n\n// Inherit from actual ServerRequest\nRequest.prototype = new ServerRequest();\nRequest.prototype.constructor = Request;\n\nRequest.prototype.sync = function () {\n  this.buffer.sync(this);\n};\n\nRequest.parseQuery = function (url) {\n  var str = String(url);\n  var q = str.split('?')[1] || '';\n  return q ? utils.uri.objectify(q) : {};\n};\n\nmodule.exports.Request = Request;\n","/home/travis/build/npmtest/node-npmtest-geddy/node_modules/geddy/lib/utils.js":"var fs = require('fs')\n  , path = require('path')\n  , utils = require('utilities')\n  , useCoffee = false;\n\nutils.mixin(utils, new (function () {\n  var PAT = /\\.(js|coffee)$/;\n\n  // Add this pseudo-private to use for grabbing\n  // models/controllers\n  this._getConstructorsFromDirectory = function (dirname) {\n    var cwd = process.cwd()\n      , dirList = fs.readdirSync(dirname)\n      , fileName\n      , filePath\n      , ctorName\n      , ret = [];\n\n    for (var i = 0; i < dirList.length; i++) {\n      fileName = dirList[i];\n      // Any files ending in '.js' or '.coffee'\n      if (PAT.test(fileName)) {\n        // Fucking CoffeeScript\n        if (fileName.match(/\\.coffee$/)) {\n          useCoffee = useCoffee || utils.file.requireLocal('coffee-script');\n        }\n\n        // Strip the extension from the file name\n        fileName = fileName.replace(PAT, '');\n\n        // Convert underscores to camelCase with\n        // initial cap, e.g., 'NeilPearts'\n        ctorName = utils.string.camelize(fileName, {initialCap: true});\n        filePath = path.join(cwd, dirname, fileName);\n        ret.push({\n            ctorName: ctorName\n          , filePath: filePath\n        });\n      }\n    }\n    return ret;\n  };\n\n})());\n\nmodule.exports = utils;\n"}